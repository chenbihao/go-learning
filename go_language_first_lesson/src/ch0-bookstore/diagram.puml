@startuml
namespace server {
    class BookStoreServer << (S,Aquamarine) >> {
        - s store.Store
        - srv *http.Server

        - createBookHandler(w http.ResponseWriter, req *http.Request)
        - updateBookHandler(w http.ResponseWriter, req *http.Request)
        - getBookHandler(w http.ResponseWriter, req *http.Request)
        - getAllBooksHandler(w http.ResponseWriter, req *http.Request)
        - delBookHandler(w http.ResponseWriter, req *http.Request)

        + ListenAndServe() (<font color=blue>chan</font> error, error)
        + Shutdown(ctx context.Context) error

    }
}


namespace store {
    class Book << (S,Aquamarine) >> {
        + Id string
        + Name string
        + Authors []string
        + Press string

    }
    class MemStore << (S,Aquamarine) >> {
        - books <font color=blue>map</font>[string]*store.Book

        + Create(book *store.Book) error
        + Update(book *store.Book) error
        + Get(id string) (store.Book, error)
        + Delete(id string) error
        + GetAll() ([]store.Book, error)

    }
    interface Store  {
        + Create( *Book) error
        + Update( *Book) error
        + Get( string) (Book, error)
        + GetAll() ([]Book, error)
        + Delete( string) error

    }
}
"sync.RWMutex" *-- "store.MemStore"

"store.Store" <|-- "store.MemStore"

@enduml
